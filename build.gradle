buildscript {
    repositories {
        mavenCentral()
        
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.2.RELEASE")
        classpath('se.transmode.gradle:gradle-docker:1.2')
         classpath 'org.hidetake:gradle-ssh-plugin:0.1.7'
    }
}

apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'war'
apply plugin: 'docker'
apply plugin: 'ssh'
apply plugin: 'maven'

group = 'com.cloudshaala.service'
// artifactId is taken by default, from folder name
version = '0.1-SNAPSHOT'

ssh {
    config(StrictHostKeyChecking: 'no')
}
remotes {
    testserver {
        host = 'cloudshaala.com'
        user = 'root'
       // identity = file("${System.properties['user.home']}/.ssh/id_dsa")
       password ='hemantabc@123'
    }
}


project.webAppDirName = 'web'
jar {
    baseName = 'cloudshaala-services'
    version =  '0.1.0'
}

war {
    baseName = 'cloudshaala-services'
    version =  '0.1.0'
    archiveName = 'services.war'
}

configurations {
	 compile.exclude module: 'spring-boot-starter-logging'
	  compile.exclude module: 'org.slf4j'
    providedRuntime
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

task h2dev <<{
    bootRun { systemProperty "spring.profiles.active", "h2dev" }
}
h2dev.finalizedBy bootRun

task server <<{
    bootRun { systemProperty "spring.profiles.active", "server" }
}
server.finalizedBy bootRun

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web"){
    exclude module: "spring-boot-starter-logging"
    exclude module: "logback-classic"
	}
	    compile("org.springframework.boot:spring-boot-starter-actuator"){
	    exclude module: "spring-boot-starter-logging"
	    exclude module: "logback-classic"
	}
	    compile("org.springframework.boot:spring-boot-starter-security"){
	    exclude module: "spring-boot-starter-logging"
	    exclude module: "logback-classic"
	}
    compile("org.springframework.boot:spring-boot-starter-log4j2")
    compile("io.springfox:springfox-swagger2:2.4.0")
    compile("io.springfox:springfox-swagger-ui:2.4.0")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("com.h2database:h2")
    compile ("mysql:mysql-connector-java:5.1.38")
    compile("org.springframework.boot:spring-boot-devtools")
 	providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("junit:junit")
    compile files('./libs/cloudshaala_beans.jar')
    
}

task buildDocker(type: Docker, dependsOn: jar) {
  tagVersion = jar.version
  applicationName = jar.baseName
  dockerfile = file('Dockerfile.txt')
  doFirst {
   
    copy {
      from jar
      into stageDir
    }
  }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}
task deployTestServer << {
    deploy(remotes.testserver)
}
deployTestServer.dependsOn build
def deploy(def server) {
    logger.lifecycle("Deploying to $server")
    logger.lifecycle("Copying ${war.archivePath.absolutePath} to $server ... Be patient .. takes time ...")
    sshexec {
        session(server) {
            put(war.archivePath.absolutePath, war.archiveName)
        }
    }
    sshexecute(server, 'service tomcat9 stop')
    sshexecute(server, 'rm -rf /opt/tomcat9/webapps/services*')
    sshexecute(server, "cp ${war.archiveName}  /opt/tomcat9/webapps")
    sshexecute(server, 'service tomcat9 start')
}
def sshexecute(def server, def cmd) {
    logger.lifecycle("Executing '$cmd'  ...")
    sshexec {
        session(server) {
            execute(cmd, pty: true)
        }
    }
    }